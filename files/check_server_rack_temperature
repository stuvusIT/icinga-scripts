#!/usr/bin/env bash

# Checks the temperature in the server rack and outputs the results as perfdata. Sensors possible are the tinkerforge temperature 2.0 bricklet and their PTC bricklet.
#
# Parameters:
# -c - Temperature that is critical (defaults to 40째C)
# -w - Temperature that is warning (defaults to 30째C)
# -b - bricklet-type to use
# -h - IP or hostname of server rack monitoring brick
# -u - UID of sensor in server rack

# shellcheck source=common.sh
. "$(dirname "${0}")/common.sh"
checkName=server_rack_temperature

# Parameters
warn=30
crit=40

usage() {
	echo "Usage: ${0} -h <host> -u <uid> -b <bricklet> -w <warning> -c <critical>"
	exit 3
}

# Parse parameters
while getopts ":w:c:h:u:b:" opt; do
	case "${opt}" in
		c)
			crit="${OPTARG}"
			;;
		w)
			warn="${OPTARG}"
			;;
		b)
			bricklet="${OPTARG}"
			;;
		h)
			host="${OPTARG}"
			;;
		u)
			uid="${OPTARG}"
			;;
		\?)
			echo "Invalid option: -${OPTARG}"
			usage
			;;
		:)
			echo "Option -${OPTARG} requires an argument"
			usage
			;;
	esac
done

temp="$(bc <<< "$($(dirname "${0}")/tinkerforge --host $host call $bricklet $uid get-temperature | cut -d "=" -f 2)/100")"
# Format output
if [ "${temp}" -gt "${crit}" ]; then
	checkState=CRITICAL
elif [ "${temp}" -gt "${warn}" ]; then
	checkState=WARNING
fi
checkOutput="${temp} 째C"

# Format perfdata
checkPerfdata="temperature=${temp}째C;${warn};${crit}"

checkReturn
