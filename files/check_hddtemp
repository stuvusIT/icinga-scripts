#!/usr/bin/env python3

# usage: check_hddtemp [-h] [-tw TEMP_WARN] [-tc TEMP_CRIT]
#                      [--temp-max TEMP_MAX] [-i IGNORE]
#
# Check the temperature of all SCSI-like devices.
#
# optional arguments:
#   -h, --help            show this help message and exit
#   -tw TEMP_WARN, --temp-warn TEMP_WARN
#                         Return state WARNING if any device temperature is
#                         above this (in degree Celcius)
#   -tc TEMP_CRIT, --temp-crit TEMP_CRIT
#                         Return state CRITICAL if any device temperature is
#                         above this (in degree Celcius)
#   --temp-max TEMP_MAX   Use this value as maximum for performance data
#   -i IGNORE, --ignore IGNORE
#                         Ignore this device, e.g. 'sda'. May be provided
#                         multiple times.


import os
import subprocess
import argparse
import json
import ast
from common import doCheck


class ScanAborted(Exception):
    pass


def check(ret):
    args = parse_args()
    temp_crit = args['temp_crit']
    temp_warn = args['temp_warn']

    ret['name'] = 'hddtemp'

    try:
        def has_temp(dev):
            return 'temp' in dev
        scanned_devices = get_scanned_devices(args['ignore'])
        measured_devices = list(filter(has_temp, scanned_devices))

        if len(scanned_devices) != len(measured_devices):
            ret['state'] = 'UNKNOWN'

        if measured_devices:
            temp_values = [dev['temp'] for dev in measured_devices]
            temp_max = max(temp_values)
            temp_min = min(temp_values)

            def get_perfdata(dev):
                temp_upper_bound = max(temp_max, args['temp_max'])
                return '{}={}°C;{};{};0;{}'.format(
                    dev['name'], dev['temp'], temp_warn, temp_crit, temp_upper_bound)
            ret['perfdata'] = ' '.join(map(get_perfdata, measured_devices))
            ret['output'] = 'HDD temperature is in range [{}, {}].'.format(temp_min, temp_max)
            if temp_max >= temp_crit:
                ret['state'] = 'CRITICAL'
            elif temp_max >= temp_warn:
                ret['state'] = 'WARNING'

        def get_details(dev):
            msg = '{}°C'.format(dev['temp']) if 'temp' in dev else dev['error']
            return '{} ({}): {}'.format(dev['name'], dev['model'].strip(), msg)
        ret['details'] = '\n'.join(map(get_details, scanned_devices))
    except ScanAborted as raised:
        for k, v in ast.literal_eval(str(raised)).items():
            ret[k] = v


def parse_args():
    parser = argparse.ArgumentParser(prog='check_hddtemp',
                                     description='Check the temperature of all SCSI-like devices.')
    parser.add_argument(
        '-tw',
        '--temp-warn',
        help="Return state WARNING if any device temperature is above this (in degree Celcius)",
        type=int,
        default=40)
    parser.add_argument(
        '-tc',
        '--temp-crit',
        help="Return state CRITICAL if any device temperature is above this (in degree Celcius)",
        type=int,
        default=50)
    parser.add_argument(
        '--temp-max',
        help="Use this value as maximum for performance data",
        type=int,
        default=65)
    parser.add_argument(
        '-i',
        '--ignore',
        help="Ignore this device, e.g. 'sda'. May be provided multiple times.",
        default=[],
        action='append')
    return vars(parser.parse_args())


def get_scanned_devices(ignore_names):
    def not_ignored(dev):
        return dev['name'] not in ignore_names

    devices = get_devices()
    if not devices:
        raise ScanAborted({'output': 'No devices found.'})
    relevant = list(filter(not_ignored, devices))
    if not relevant:
        raise ScanAborted({'output': 'All devices ignored.'})
    return scan_devices(relevant)


def get_devices():
    cmd = ['lsblk', '-SJ', '--output=NAME,MODEL']
    return json.loads(get_stdout(cmd))['blockdevices']


def scan_devices(devices):
    cmd = ['hddtemp', '-n'] + list(map(device_path, devices))
    lines = get_stdout(cmd).splitlines()
    return list(map(add_scan_result, devices, lines))


def device_path(dev):
    path = '/dev/' + dev['name']
    if not os.access(path, os.R_OK):
        raise ScanAborted({'state': 'UNKNOWN', 'output': 'Not allowed to access `{}`'.format(path)})
    return path


def add_scan_result(dev, line):
    dev = dev.copy()
    try:
        dev['temp'] = int(line)
    except ValueError:
        dev['error'] = line.split(':')[-1].strip()
    return dev


def get_stdout(cmd):
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output = proc.stdout.decode('ISO-8859-1')
    msg = '`{}` failed with return code {}.'.format(' '.join(cmd), proc.returncode)
    if proc.returncode != 0:
        raise ScanAborted({'state': 'UNKNOWN', 'output': msg, 'details': output})
    return output


doCheck(check)
